#ifndef MEMORY_VAULT_MODULE_PASSWORD_CACHE_HPP
#define MEMORY_VAULT_MODULE_PASSWORD_CACHE_HPP

#include <string>
#include <memory>
#include <vector>
#include <chrono>

#include <botan/bcrypt.h>
#include <botan/hex.h>

#include "keto/common/Log.hpp"

#include "keto/obfuscate/MetaString.hpp"
#include "keto/crypto/Containers.hpp"
#include "keto/crypto/SecureVectorUtils.hpp"

namespace keto {
namespace memory_vault_session {

class PasswordCache {
public:
    PasswordCache(keto::crypto::SecureVector tmpKey) : ${MEMORY_VAULT_SESSION_SEED_HASH}(tmpKey) {
        start = std::chrono::steady_clock::now();
    }

    keto::crypto::SecureVector getSeedHash() {
        return ${MEMORY_VAULT_SESSION_SEED_HASH};
    }

    bool isExpired() {
        return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::steady_clock::now() - start).count() > (5 * 60);
    }

private:
    keto::crypto::SecureVector ${MEMORY_VAULT_SESSION_SEED_HASH};
    std::chrono::steady_clock::time_point start;
};

typedef std::shared_ptr<PasswordCache> PasswordCachePtr;

}
}

#endif