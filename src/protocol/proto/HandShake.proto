syntax = "proto3";

package keto.proto;

enum HelloResponse {
    WELCOME = 0;
    GO_AWAY = 1;
    DENIED = 2;
    SHUTTING_DOWN = 3;
}

/**
 * This message is encrypted using the session_key and contains the
 * private key that will be used to encrypt messages from the source.
 */
message EncryptedConfirmation {
    bytes private_key = 1;
}

/**
 * The client messages used by the command line client.
 */
message ClientHello {
    uint32 version = 1;
    bytes client_hash = 2;
    bytes signature = 3;
}

message ClientResponse {
    HelloResponse response = 1;
    bytes session_hash = 2;
    bytes session_key = 3;
}

// These messages are currently not implemented
// If necessary to provide a follow up to the initial hello and client response
// they will be implemented.
//
// The signed client hash when verified by the server is currently seen as
// sufficient atleast during development. If it proves to be in addiquete
// the the underlying encrypted connection is not sufficient these will be
// implemented.
// a message encrypting the 
message ClientConfirmation {
    bytes encrypted_bytes = 1;
}

message ClientAcceptance {
    HelloResponse response = 1;
}

/**
 * The server to server hand shake
 */
message ServerHelo {
    uint32 version = 1;
    // account hash
    bytes account_hash = 2;
    // merkel root of all loaded modules. If root is not recognised
    // then access will be DENIED.
    bytes instance_merkel_root = 3;
    // signature of merkel root
    // must be signed by a recognised key in order to join.
    bytes signature = 4;
}

message ServerReponse {
    HelloResponse response = 1;
    bytes session_hash = 2;
    bytes session_key = 3;
}

message ServerConfirmation {
    bytes encrypted_bytes = 1;
}

message ServerAcceptance {
    HelloResponse response = 1;
}

// this message is called to refresh the current session
// on the client it should result in an updated server confirmation
message ServerRefresh {
    HelloResponse response = 1;
    bytes session_key = 2;
}

// this message is sent when a server is shutting down and all peers need to
// be made away of it.
message ServerGoAway {
    HelloResponse response = 1;
}

// this response lists a bunch of peers
message PeerResponse {
    repeated string peers = 1;
}

/**
 * The server to server hand shake
 */
message ConsensusMessage {
    uint32 version = 1;
    // account hash
    bytes account_hash = 2;
    // System hashes
    repeated bytes system_hashs = 3;
    // merkel root of all loaded modules. If root is not recognised
    // then access will be DENIED.
    bytes instance_merkel_root = 4;
    // signature of merkel root
    // must be signed by a recognised key in order to join.
    bytes signature = 5;
}
