syntax = "proto3";

package keto.proto;

enum HelloResponse {
    WELCOME = 0;
    GO_AWAY = 1;
    DENIED = 2;
    SHUTTING_DOWN = 3;
}

/**
 * This message is encrypted using the session_key and contains the
 * private key that will be used to encrypt messages from the source.
 */
message EncryptedConfirmation {
    bytes private_key = 1;
}
/**
 * The client messages used by the command line client.
 */
message ClientHello {
    uint32 version = 1;
    bytes client_hash = 2;
    bytes signature = 3;
}

message ClientResponse {
    HelloResponse response = 1;
    bytes session_hash = 2;
    bytes session_key = 3;
}

// These messages are currently not implemented
// If necessary to provide a follow up to the initial hello and client response
// they will be implemented.
//
// The signed client hash when verified by the server is currently seen as
// sufficient atleast during development. If it proves to be in addiquete
// the the underlying encrypted connection is not sufficient these will be
// implemented.
// a message encrypting the 
message ClientConfirmation {
    bytes encrypted_bytes = 1;
}

message ClientAcceptance {
    HelloResponse response = 1;
}

/**
 * The server to server hand shake
 */
message ServerHelo {
    uint32 version = 1;
    // account hash
    bytes account_hash = 2;
    // signature of merkel root
    // of the account hash 
    bytes signature = 3;
}

message PeerRequest {
    // the versions
    uint32 version = 1;
    // the list of accounts
    repeated bytes account_hash = 2;
    // the host name
    string hostname = 3;
}


// this response lists a bunch of peers
message PeerResponse {
    // the versions
    uint32 version = 1;
    // the list of peers
    repeated string peers = 2;
}


/**
 * The server to server hand shake
 */
message ConsensusMessage {
    // the version for this protocol
    uint32 version = 1;
    // account hash
    bytes account_hash = 2;
    // the serialized software consensus message
    bytes msg = 3;
}


/**
 * The consensus accepted message
 */
message ConsensusAcceptedMessage {
    // the version for this protocol
    uint32 version = 1;
    // the consensus accepted status
    bool accepted = 2;
}


/**
 * The consensus accepted message
 */
message ProtocolAcceptedMessage {
    // the version for this protocol
    uint32 version = 1;
    // the protocol accepted status
    bool accepted = 2;
}

/**
 * The consensus accepted message
 */
message ProtocolHeartbeatMessage {
    // the version for this protocol
    uint32 version = 1;
    // the protocol accepted status
    uint64 timestamp = 2;
    // the current network slot
    uint32 network_slot = 3;
    // the election slot
    uint32 network_election_slot = 4;
    // the election slot
    uint32 network_election_publish_slot = 5;
    // the election slot
    uint32 network_confirmation_slot = 6;
}
