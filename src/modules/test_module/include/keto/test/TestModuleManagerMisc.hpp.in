/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

#include <stdio.h>
#include <sys/ptrace.h>
#include <boost/dll/alias.hpp>
#include <boost/dll/shared_library.hpp>
#include <boost/shared_ptr.hpp>

#include <botan/hex.h>

#include "keto/common/Log.hpp"

#include "keto/obfuscate/MetaString.hpp"
#include "keto/crypto/Containers.hpp"
#include "keto/crypto/SecureVectorUtils.hpp"
#include "keto/crypto/HashGenerator.hpp"

#include "keto/test/TestModuleManager.hpp"
#include "keto/common/MetaInfo.hpp"

extern unsigned char* _start;
extern unsigned char* __etext;

keto::crypto::SecureVector ${TEST_CONSENSUS_DETECT_BREAK_METHOD}(const keto::crypto::SecureVector& input) {
    keto::crypto::SecureVector result = keto::crypto::HashGenerator().generateHash(input);
    char* start = (char*)&_start;
    char* end = (char*)&__etext;
    while(start != end) {
        if(((*(volatile unsigned*)start) & 0xFF) == 0xCC) {
            result = keto::crypto::HashGenerator().generateHash(result);
        }
        ++start;
    }
    return result;
}

keto::crypto::SecureVector ${TEST_CONSENSUS_TEST_PTRACE_METHOD}(const keto::crypto::SecureVector& input) {
    keto::crypto::SecureVector result = keto::crypto::HashGenerator().generateHash(input);
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) == 0)
    {
        return keto::crypto::HashGenerator().generateHash(result);
    }
    return result;
}


${0002_keto_test_module_headerList}

namespace keto {
namespace test {

${0002_keto_test_module_consensus_scripts}

keto::crypto::SecureVector ${TEST_MODULE_SIGNATURE_METHOD}() {
    std::string signature = OBFUSCATED("${TEST_MODULE_SIGNATURE}");
    return keto::crypto::SecureVectorUtils().copyStringToSecure(signature);
}

keto::crypto::SecureVector ${TEST_MODULE_KEY_METHOD}() {
    std::string key = OBFUSCATED("${TEST_MODULE_KEY}");
    return keto::crypto::SecureVectorUtils().copyStringToSecure(key);
}

keto::software_consensus::SourceVersionMap ${TEST_SOURCE_VERSION_METHOD_MAP}() {
    keto::software_consensus::SourceVersionMap sourceVersionMap;

    ${0002_keto_test_module_headerClassList}
    ${0002_keto_test_module_sourceClassList}
    
    return sourceVersionMap;
}

keto::software_consensus::ConsensusHashScriptInfoVector ${TEST_CONSENSUS_HASH_SCRIPT_METHOD}() {
    keto::software_consensus::ConsensusHashScriptInfoVector consensusHashScript;
    
    ${0002_keto_test_module_consensus_mapping}

    return consensusHashScript;
}

keto::software_consensus::ConsensusHashGeneratorPtr TestModuleManager::getConsensusHash() {

    keto::software_consensus::SourceVersionMap sourceVersionMap = ${TEST_SOURCE_VERSION_METHOD_MAP}();

    keto::software_consensus::ConsensusHashScriptInfoVector consensusVector = ${TEST_CONSENSUS_HASH_SCRIPT_METHOD}();
    
    
    keto::software_consensus::ConsensusHashGeneratorPtr consensusHashGenerator = 
        keto::software_consensus::ConsensusHashGenerator::initInstance(
            consensusVector,
            &${TEST_MODULE_SIGNATURE_METHOD},
            &${TEST_MODULE_KEY_METHOD},
            sourceVersionMap);
    
    return consensusHashGenerator;
}

keto::software_consensus::CallBacks TestModuleManager::getCallBacks() {
    keto::software_consensus::CallBacks callBacks;
    callBacks.push_back(&${TEST_CONSENSUS_DETECT_BREAK_METHOD});
    callBacks.push_back(&${TEST_CONSENSUS_TEST_PTRACE_METHOD});
    return callBacks;
}

}
}

