# - Try to find the Librdf library
#
# Once done this will define
#
#  LIBWALLY_FOUND - System has
#  LIBWALLY_INCLUDE_DIR - The librdf include directory
#  LIBWALLY_LIBRARIES - The libraries needed to use rdf

if (NOT DEFINED LIBWALLY_ROOT)
  set(LIBWALLY_ROOT_FOLDER $ENV{LIBWALLY_ROOT})
endif()

IF (LIBWALLY_INCLUDE_DIR AND LIBWALLY_LIBRARY)
   # in cache already
   SET(LibRdf_FIND_QUIETLY TRUE)
ENDIF (LIBWALLY_INCLUDE_DIR AND LIBWALLY_LIBRARY)

IF (NOT WIN32)
   # try using pkg-config to get the directories and then use these values
   # in the FIND_PATH() and FIND_LIBRARY() calls
   # also fills in LIBWALLY_DEFINITIONS, although that isn't normally useful
   FIND_PACKAGE(PkgConfig)
   PKG_SEARCH_MODULE(PC_LIBRDF wally-core)
   SET(LIBWALLY_DEFINITIONS ${PC_LIBWALLY_CFLAGS})
ENDIF (NOT WIN32)


# attempt to find the botan include directory using the standard KETO build process
# fall back to the installed packages
FIND_PATH(LIBWALLY_INCLUDE_DIR wally.hpp
    PATHS "${LIBWALLY_ROOT_FOLDER}/include/"
)
IF (NOT LIBWALLY_INCLUDE_DIR)
    FIND_PATH(LIBWALLY_INCLUDE_DIR wally.hpp
        HINTS
        ${PC_LIBWALLY_INCLUDEDIR}
        ${PC_LIBWALLY_INCLUDE_DIRS}
        )
ENDIF (NOT LIBWALLY_INCLUDE_DIR)

# find the library, first be optimist and this is being built with a standard KETO build,
# if not found fall back to the possible package install
find_library(LIBWALLY_WALLY_LIBRARY
    NAMES wallycore
    PATHS ${LIBWALLY_ROOT_FOLDER}/lib)

find_library(LIBWALLY_SECP256K1_LIBRARY
    NAMES secp256k1
    PATHS ${LIBWALLY_ROOT_FOLDER}/lib)


IF (NOT LIBWALLY_LIBRARY)
    FIND_LIBRARY(LIBWALLY_LIBRARY NAMES ${PC_LIBWALLY_LIBRARIES}
        HINTS
        ${PC_LIBWALLY_LIBDIR}
        ${PC_LIBWALLY_LIBRARY_DIRS}
        )
ENDIF (NOT LIBWALLY_LIBRARY)

message(STATUS "LIBWALLY_INCLUDE_DIR " ${LIBWALLY_INCLUDE_DIR})
message(STATUS "LIBWALLY_WALLY_LIBRARY " ${LIBWALLY_WALLY_LIBRARY})
message(STATUS "LIBWALLY_SECP256K1_LIBRARY " ${LIBWALLY_SECP256K1_LIBRARY})

MARK_AS_ADVANCED(LIBWALLY_INCLUDE_DIR LIBWALLY_WALLY_LIBRARY LIBWALLY_SECP256K1_LIBRARY)

# handle the QUIETLY and REQUIRED arguments and set LIBWALLY_FOUND to TRUE if
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
IF (NOT APPLE AND NOT WIN32)
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(Libwally DEFAULT_MSG LIBWALLY_INCLUDE_DIR LIBWALLY_WALLY_LIBRARY LIBWALLY_SECP256K1_LIBRARY)
ELSE (NOT APPLE AND NOT WIN32)
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(Libwally DEFAULT_MSG LIBWALLY_INCLUDE_DIR LIBWALLY_WALLY_LIBRARY LIBWALLY_SECP256K1_LIBRARY)
ENDIF (NOT APPLE AND NOT WIN32)

IF(LIBWALLY_FOUND)
    SET(LIBWALLY_WALLY_LIBRARY    ${LIBWALLY_WALLY_LIBRARY})
    SET(LIBWALLY_SECP256K1_LIBRARY    ${LIBWALLY_SECP256K1_LIBRARY})
    SET(LIBWALLY_INCLUDE_DIR ${LIBWALLY_INCLUDE_DIR})
ENDIF()
